<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>java_pro_hw8</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring-boot-dependencies.version>3.2.5</spring-boot-dependencies.version>
        <spring-boot-maven-plugin.version>${spring-boot-dependencies.version}</spring-boot-maven-plugin.version>
        <snakeyaml.version>2.2</snakeyaml.version>

        <!-- Maven -->
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.2.5</maven-surefire-plugin.version>

        <!-- OpenAPI -->
        <openapi-spec>
            ${project.basedir}/src/main/resources/api/limit-service-rest-v1.yaml
        </openapi-spec>
        <openapi-generator-maven-plugin.version>7.3.0</openapi-generator-maven-plugin.version>
        <find-and-replace-maven-plugin.version>1.1.0</find-and-replace-maven-plugin.version>

        <!-- Tests -->
        <testcontainers.version>1.19.8</testcontainers.version>
        <wiremock.version>3.5.4</wiremock.version>
        <wiremock-testcontainers-module.version>1.0-alpha-13</wiremock-testcontainers-module.version>
        <testcontainers-redis.version>1.6.4</testcontainers-redis.version>
        <rest-assured.version>5.4.0</rest-assured.version>

        <!-- Swagger -->
        <springdoc.version>2.5.0</springdoc.version>

        <!-- Other -->
        <slf4j.version>2.0.13</slf4j.version>
        <mapstruct.version>1.5.5.Final</mapstruct.version>
        <lombok.version>1.18.30</lombok.version>
        <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
        <annotations.version>3.0.1u2</annotations.version>
    </properties>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Data -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!-- Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-common</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <!-- Tests -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wiremock</groupId>
            <artifactId>wiremock-standalone</artifactId>
            <version>${wiremock.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wiremock.integrations.testcontainers</groupId>
            <artifactId>wiremock-testcontainers-module</artifactId>
            <version>${wiremock-testcontainers-module.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Other -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <!--
            Зависимость решает проблему с непонятной ошибкой
            Cannot find annotation method 'when()' in type 'javax.annotation.Nonnull': class file for javax.annotation.Nonnull not found
        -->
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <version>${annotations.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <release>${maven.compiler.target}</release>
                            <annotationProcessorPaths>
                                <path>
                                    <groupId>org.projectlombok</groupId>
                                    <artifactId>lombok</artifactId>
                                    <version>${lombok.version}</version>
                                </path>
                                <path>
                                    <groupId>org.mapstruct</groupId>
                                    <artifactId>mapstruct-processor</artifactId>
                                    <version>${mapstruct.version}</version>
                                </path>
                                <dependency>
                                    <groupId>org.projectlombok</groupId>
                                    <artifactId>lombok-mapstruct-binding</artifactId>
                                    <version>${lombok-mapstruct-binding.version}</version>
                                </dependency>
                            </annotationProcessorPaths>
                            <failOnWarning>true</failOnWarning>
                            <compilerArgs>
                                <arg>-Xlint:all,-unchecked,-serial,-processing</arg>
                                <arg>-Amapstruct.defaultComponentModel=spring</arg>
                                <arg>-Amapstruct.unmappedSourcePolicy=error</arg>
                                <arg>-Amapstruct.unmappedTargetPolicy=error</arg>
                                <arg>-Amapstruct.defaultInjectionStrategy=constructor</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
                                <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED</arg>
                            </compilerArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <environmentVariables>
                        <TESTCONTAINERS_NEXUS_URL>docker.repo-ci.sfera.inno.local</TESTCONTAINERS_NEXUS_URL>
                        <!--
                            Важно! Слеш (/) обязательно должен быть на конце TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX
                        -->
                        <TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX>
                            docker.repo-ci.sfera.inno.local/tbcv-docker/
                        </TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX>
                        <TESTCONTAINERS_CHECKS_DISABLE>true</TESTCONTAINERS_CHECKS_DISABLE>
                        <TESTCONTAINERS_RYUK_DISABLED>true</TESTCONTAINERS_RYUK_DISABLED>
                    </environmentVariables>
                    <!--suppress UnresolvedMavenProperty -->
                    <argLine>${surefireArgLine} -Dfile.encoding=UTF-8</argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>${openapi-generator-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>generate-openapi-spec</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${openapi-spec}</inputSpec>
                            <generatorName>spring</generatorName>
                            <generateApiTests>false</generateApiTests>
                            <generateModelTests>false</generateModelTests>
                            <modelNameSuffix>Dto</modelNameSuffix>
                            <apiPackage>com.example.api</apiPackage>
                            <modelPackage>com.example.dao.model.generated</modelPackage>
                            <output>${project.build.directory}/generated-sources/main/java</output>
                            <configOptions>
                                <useSpringBoot3>true</useSpringBoot3>
                                <useTags>true</useTags>
                                <interfaceOnly>true</interfaceOnly>
                                <delegatePattern>true</delegatePattern>
                                <dateLibrary>java8-localdatetime</dateLibrary>
                                <openApiNullable>false</openApiNullable>
                                <generatedConstructorWithRequiredArgs>false</generatedConstructorWithRequiredArgs>
                                <serializableModel>true</serializableModel>
                                <serializationLibrary>jackson</serializationLibrary>
                                <additionalModelTypeAnnotations>
                                    @lombok.Builder
                                    @lombok.NoArgsConstructor
                                    @lombok.AllArgsConstructor
                                    @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
                                </additionalModelTypeAnnotations>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                При использовании JDK17, @Lombok.Builder и аннотированных типах в списках (так в частности делает openapi generator)
                возникает ошибка компиляции java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 0
                https://github.com/projectlombok/lombok/issues/2434
                Ошибка устранена в более поздних версиях JDK.
                У нас для решения проблемы используем плагин, чтобы удалить аннотации из списков автоматически сгенерированных объектов.

                @see https://github.com/floverfelt/find-and-replace-maven-plugin
            -->
            <plugin>
                <groupId>io.github.floverfelt</groupId>
                <artifactId>find-and-replace-maven-plugin</artifactId>
                <version>${find-and-replace-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>valid</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>find-and-replace</goal>
                        </goals>
                        <configuration>
                            <!--
                                Possible replacementType values: file-contents, filenames, directory-names.
                                To run for multiple types, pass the values as a CSV list.
                            -->
                            <replacementType>file-contents</replacementType>
                            <baseDir>
                                target/generated-sources/main/java/src/main/java/org/example/dao/model/generated
                            </baseDir>
                            <findRegex><![CDATA[List<@Valid\s]]></findRegex>
                            <replaceValue><![CDATA[List<]]></replaceValue>
                            <recursive>true</recursive>
                        </configuration>
                    </execution>
                    <execution>
                        <id>size</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>find-and-replace</goal>
                        </goals>
                        <configuration>
                            <!--
                                Possible replacementType values: file-contents, filenames, directory-names.
                                To run for multiple types, pass the values as a CSV list.
                            -->
                            <replacementType>file-contents</replacementType>
                            <baseDir>
                                target/generated-sources/main/java/src/main/java/org/example/dao/model/generated
                            </baseDir>
                            <findRegex><![CDATA[List<@Size\(max = 255\)]]></findRegex>
                            <replaceValue><![CDATA[List<]]></replaceValue>
                            <recursive>true</recursive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>skip-test</id>
            <properties>
                <maven.test.skip>true</maven.test.skip>
            </properties>
        </profile>
    </profiles>
</project>